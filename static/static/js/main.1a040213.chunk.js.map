{"version":3,"sources":["services/AuthenticationService.js","components/auth/Register.js","components/Home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["JSON","parse","localStorage","getItem","username","email","password","axios","post","API_URL","required","value","className","role","isEmail","vusername","length","vpassword","Register","props","handleRegister","bind","onChangeUsername","onChangeEmail","onChangePassword","state","successful","message","e","this","setState","target","preventDefault","form","validateAll","checkBtn","context","_errors","AuthService","register","then","response","data","error","resMessage","toString","src","alt","onSubmit","ref","c","htmlFor","type","name","onChange","validations","style","display","Component","Home","currentUser","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.1a040213.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/api/\";\n\nclass AuthService {\n  currentUser() {\n    return JSON.parse(localStorage.getItem('currentUser'));\n  }\n\n  register(username, email, password) {\n    return axios.post(API_URL + \"register\", {\n      username,\n      email,\n      password\n    });\n  }\n}\n\nexport default new AuthService();","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\n\nimport AuthService from \"../../services/AuthenticationService\";\n\nconst required = value => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst email = value => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This is not a valid email.\n      </div>\n    );\n  }\n};\n\nconst vusername = value => {\n  if (value.length < 3 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The username must be between 3 and 20 characters.\n      </div>\n    );\n  }\n};\n\nconst vpassword = value => {\n  if (value.length < 6 || value.length > 40) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The password must be between 6 and 40 characters.\n      </div>\n    );\n  }\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successful: false,\n      message: \"\"\n    };\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  handleRegister(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.register(\n        this.state.username,\n        this.state.email,\n        this.state.password\n      ).then(\n        response => {\n          this.setState({\n            message: response.data.message,\n            successful: true\n          });\n        },\n        error => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            successful: false,\n            message: resMessage\n          });\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container\">\n          <img\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n            alt=\"profile-img\"\n            className=\"profile-img-card\"\n          />\n\n          <Form\n            onSubmit={this.handleRegister}\n            ref={c => {\n              this.form = c;\n            }}\n          >\n            {!this.state.successful && (\n              <div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onChangeUsername}\n                    validations={[required, vusername]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChangeEmail}\n                    validations={[required, email]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Input\n                    type=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangePassword}\n                    validations={[required, vpassword]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                </div>\n              </div>\n            )}\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    this.state.successful\n                      ? \"alert alert-success\"\n                      : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                >\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={c => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthService from '../services/AuthenticationService'\nimport Register from './auth/Register'\n\nconst Home = (props) => {\n\tif (!AuthService.currentUser()) {\n\t\treturn <Register/>\n\t}\n\n\treturn <p>Welcome, user</p>\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}